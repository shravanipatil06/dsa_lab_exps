#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
    struct Node *prev;
};

struct Node *head = NULL;

// Function to insert at the beginning
void insertBegin(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;

    if (head == NULL) {
        head = newNode;
        head->next = head;
        head->prev = head;
    } else {
        struct Node *last = head->prev;
        newNode->next = head;
        newNode->prev = last;
        head->prev = newNode;
        last->next = newNode;
        head = newNode;
    }
    printf("Node inserted at beginning: %d\n", value);
}

// Function to insert at the end
void insertEnd(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;

    if (head == NULL) {
        head = newNode;
        head->next = head;
        head->prev = head;
    } else {
        struct Node *last = head->prev;
        last->next = newNode;
        newNode->prev = last;
        newNode->next = head;
        head->prev = newNode;
    }
    printf("Node inserted at end: %d\n", value);
}

// Function to delete a node by value
void deleteNode(int value) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *curr = head;

    // If node to be deleted is head
    if (curr->data == value) {
        struct Node *last = head->prev;

        if (head->next == head) {
            free(head);
            head = NULL;
        } else {
            head = head->next;
            last->next = head;
            head->prev = last;
            free(curr);
        }
        printf("Node deleted: %d\n", value);
        return;
    }

    curr = curr->next;
    while (curr != head) {
        if (curr->data == value) {
            curr->prev->next = curr->next;
            curr->next->prev = curr->prev;
            free(curr);
            printf("Node deleted: %d\n", value);
            return;
        }
        curr = curr->next;
    }

    printf("Node not found: %d\n", value);
}

// Function to display list (forward direction)
void displayForward() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *temp = head;
    printf("Circular Doubly Linked List (Forward): ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

// Function to display list (reverse direction)
void displayReverse() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node *last = head->prev;
    struct Node *temp = last;
    printf("Circular Doubly Linked List (Reverse): ");
    do {
        printf("%d ", temp->data);
        temp = temp->prev;
    } while (temp != last);
    printf("\n");
}

// Main menu
int main() {
    int choice, value;

    while (1) {
        printf("\n--- Circular Doubly Linked List Menu ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Delete a Node\n");
        printf("4. Display Forward\n");
        printf("5. Display Reverse\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter value to insert: ");
            scanf("%d", &value);
            insertBegin(value);
            break;
        case 2:
            printf("Enter value to insert: ");
            scanf("%d", &value);
            insertEnd(value);
            break;
        case 3:
            printf("Enter value to delete: ");
            scanf("%d", &value);
            deleteNode(value);
            break;
        case 4:
            displayForward();
            break;
        case 5:
            displayReverse();
            break;
        case 6:
            printf("Exiting program.\n");
            exit(0);
        default:
            printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
