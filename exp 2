#include <stdio.h>
#include <ctype.h>   // for isalnum()
#include <string.h>
#define MAX 100

char stack[MAX];
int top = -1;

// Push element into stack
void push(char x) {
    stack[++top] = x;
}

// Pop element from stack
char pop() {
    if (top == -1)
        return -1;
    else
        return stack[top--];
}

// Function to return precedence of operators
int precedence(char x) {
    if (x == '(')
        return 0;
    if (x == '+' || x == '-')
        return 1;
    if (x == '*' || x == '/')
        return 2;
    if (x == '^')
        return 3;
    return -1;
}

int main() {
    char infix[MAX], postfix[MAX];
    char *e, x;
    int k = 0;

    printf("Enter Infix Expression: ");
    scanf("%s", infix);

    e = infix;

    while (*e != '\0') {
        // If operand, add to postfix
        if (isalnum(*e)) {
            postfix[k++] = *e;
        }
        // If '(', push to stack
        else if (*e == '(') {
            push(*e);
        }
        // If ')', pop till '('
        else if (*e == ')') {
            while ((x = pop()) != '(') {
                postfix[k++] = x;
            }
        }
        // Operator encountered
        else {
            while (precedence(stack[top]) >= precedence(*e)) {
                postfix[k++] = pop();
            }
            push(*e);
        }
        e++;
    }

    // Pop remaining operators
    while (top != -1) {
        postfix[k++] = pop();
    }

    postfix[k] = '\0';

    printf("Postfix Expression: %s\n", postfix);

    return 0;
}
